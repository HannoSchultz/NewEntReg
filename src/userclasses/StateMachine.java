/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
package userclasses;

import com.codename1.components.InfiniteProgress;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.Log;
import com.codename1.io.NetworkManager;
import com.codename1.processing.Result;
import generated.StateMachineBase;
import com.codename1.ui.*;
import com.codename1.ui.events.*;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.util.Resources;
import com.codename1.xml.Element;
import com.codename1.xml.XMLParser;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.StringTokenizer;

/**
 *
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {

    ArrayList<NameReserved> ArlNameReserved;
    public String agent_code = "INKE01";
    public String name_reservation_no;
    static boolean isnamereserved = false;
    static boolean isRegStep1Passed = false;
    static boolean isRegStep2Passed = false;
    static boolean isRegStep3Passed = false;

    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }

    /**
     * this method should be used to initialize variables instead of the
     * constructor/class scope to avoid race conditions
     */
    protected void initVars(Resources res) {
    }

    @Override
    protected void onCreateFrmNewEntReg() {

    }

    //@Override
    private static InputStreamReader convertStringtoInputStreamReader(String data) {

        byte[] resultByte = data.getBytes();
        ByteArrayInputStream bis = new ByteArrayInputStream(resultByte);
        InputStreamReader is = new InputStreamReader(bis);
        return is;

    }

    private String RSM(String name) {

        name = name.trim();
        name = name.substring(1);
        name = name.substring(0, name.length() - 1);

        name = name.trim();
        name = name.substring(1);
        name = name.substring(0, name.length() - 1);

        return name;
    }

    public ArrayList search_name_MOBI(String customerCode, String name1, String name2, String name3, String name4) {

        ArrayList arrayList = new ArrayList();

        final String SOAP_BODY
                = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cipc=\"CIPC_WEB_SERVICES\">\n"
                + "\n"
                + "   <soapenv:Header/>\n"
                + "\n"
                + "   <soapenv:Body>\n"
                + "\n"
                + "      <cipc:search_name_MOBI>\n"
                + "\n"
                + "          <cipc:sUserName>wBAA7LAkWIs=</cipc:sUserName>\n"
                + "\n"
                + "          <cipc:sPassword>6EGQAUzYJlhvffhZ+gUFfg==</cipc:sPassword>\n"
                + "\n"
                + "          <cipc:sBankID>wBAA7LAkWIs=</cipc:sBankID>\n"
                + "\n"
                + "         <cipc:sCust_Code>" + customerCode + "</cipc:sCust_Code>\n"
                + "\n"
                + "         <!--Optional:-->\n"
                + "\n"
                + "         <cipc:S_name1>" + name1 + "</cipc:S_name1>\n"
                + "\n"
                + "         <!--Optional:-->\n"
                + "\n"
                + "         <cipc:S_name2>" + name2 + "</cipc:S_name2>\n"
                + "\n"
                + "         <!--Optional:-->\n"
                + "\n"
                + "         <cipc:S_name3>" + name3 + "</cipc:S_name3>\n"
                + "\n"
                + "         <!--Optional:-->\n"
                + "\n"
                + "         <cipc:S_name4>" + name4 + "</cipc:S_name4>\n"
                + "\n"
                + "      </cipc:search_name_MOBI>\n"
                + "\n"
                + "   </soapenv:Body>\n"
                + "\n"
                + "</soapenv:Envelope>";

        ConnectionRequest httpRequest = new ConnectionRequest() {
            Element h;

            @Override
            protected void buildRequestBody(OutputStream os) throws IOException {
                super.buildRequestBody(os);
                os.write(SOAP_BODY.getBytes("utf-8"));

            }

            protected void postResponse() {

                super.postResponse();
            }

            protected void readResponse(InputStream input) throws IOException {
                super.readResponse(input);

            }

            @Override
            protected void handleException(Exception err) {
                Log.p("Exception: " + err.toString());
                Dialog.show("No Internet", "There is no internet connection. Please switch your connection on.", "Okay", null);

            }
        };

        httpRequest.setUrl("https://testwebservices4.cipc.co.za/enterprise.asmx");
        httpRequest.addRequestHeader("Content-Type", "text/xml; charset=utf-8");
        httpRequest.addRequestHeader("Content-Length", SOAP_BODY.length() + "");
        httpRequest.setPost(true);

        InfiniteProgress prog = new InfiniteProgress();
        Dialog dlg = prog.showInifiniteBlocking();
        httpRequest.setDisposeOnCompletion(dlg);

        httpRequest.setTimeout(600000);//milli seconds
        NetworkManager.getInstance().addToQueueAndWait(httpRequest);
        String data = new String(httpRequest.getResponseData());
        Log.p("Data d: " + data, Log.DEBUG);

        try {

            Result result = Result.fromContent(data.toLowerCase(), Result.XML);

            Log.p("Element e: " + result, Log.DEBUG);

            XMLParser parser = new XMLParser();
            parser.setCaseSensitive(true);
            Element element = parser.parse(convertStringtoInputStreamReader(result.getAsString("//dataset")));

            for (int i = 0; i < element.getNumChildren(); i++) {

                Element child = element.getChildAt(i);

                Log.p("chiled=" + child, Log.DEBUG);
                Element name = (Element) child.getTextChildren(null, true).get(0);
                String elemName = RSM(name.toString());
                Log.p("elemName=" + elemName, Log.DEBUG);

                StringTokenizer st = new StringTokenizer(elemName, "|");

                NameSearchObject n = new NameSearchObject();
                n.setName(elemName);

                if (st != null && st.countTokens() > 1) {
                    n.setIsValid(false);
                } else {
                    n.setIsValid(true);
                }
                arrayList.add(n);
            }

        } catch (IllegalArgumentException e) {
            Log.p(e.toString());
        }

        return arrayList;
    }//end search_name_MOBI

    protected void TestNames(Form f) {
        Container contTest = (Container) findByName("Con4Names", f);
        //Container contTasks = (Container) createContainer("/theme", "Con4Names");
        String name1 = findTxtname1().getText();
        String name2 = findTxtname2().getText();
        String name3 = findTxtname3().getText();
        String name4 = findTxtname4().getText();

        ArrayList<NameSearchObject> arrayList = search_name_MOBI(agent_code, name1, name2, name3, name4);

        for (int i = 0; i < arrayList.size(); i++) {
            int count = i + 1;
            Label lblResponse = (Label) findByName("lblName" + count + "Response", contTest);
            NameSearchObject n = arrayList.get(i);
            if (n.isIsValid()) {
                lblResponse.setText("Might be available");
                lblResponse.setUIID("LabelGreen");
                lblResponse.repaint();
                contTest.repaint();
            } else {
                lblResponse.setText("Is not available");
                lblResponse.setUIID("LabelRed");
                lblResponse.repaint();
                contTest.repaint();
            }
            contTest.repaint();
        }
        f.repaint();
    }

//    @Override
//    protected void onFrmNewEntReg_BtnFileNameAction(Component c, ActionEvent event) {
//
//     Container contTasks = (Container) createContainer("/theme", "Con4Names");
//        String name1 = findTxtname1().getText();
//        String name2 = findTxtname2().getText();
//        String name3 = findTxtname3().getText();
//        String name4 = findTxtname4().getText();
//
//        ArrayList<NameSearchObject> arrayList = search_name_MOBI(agent_code, name1, name2, name3, name4);
//
//        for (int i = 0; i < arrayList.size(); i++) {
//            int count = i + 1;
//            Label lblResponse = (Label) findByName("lblName" + count + "Response", contTasks);
//            NameSearchObject n = arrayList.get(i);
//            if (n.isIsValid()) {
//                lblResponse.setText("Might be available");
//                lblResponse.setUIID("LabelGreen");
//            } else {
//                lblResponse.setText("Is not available");
//                lblResponse.setUIID("LabelRed");
//            }
//        }
//
//    }
    @Override
    protected void onFrmNewEntReg_BtnTestNamesAction(Component c, ActionEvent event) {

    }

    @Override
    protected void beforeContainerFrmNewEntReg(Container c) {

//        Tabs tabs = (Tabs) findByName("Tabs", c);
//        tabs.setSwipeActivated(false);
//        tabs.hideTabs();
//        Form f = c.getComponentForm();
//                
//        Button Testname = (Button) findByName("BtnTestNames", tabs);
//        Button FileName = (Button) findByName("BtnFileName", tabs);
//        Testname.addActionListener( new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//               TestNames(f);
//            }
//        });
    }

    @Override
    protected void onFrmNewEntReg1_BtnTestNamesAction(Component c, ActionEvent event) {
        Container contTest = (Container) findByName("Con4Names", c);
        //Container contTasks = (Container) createContainer("/theme", "Con4Names");
        String name1 = findTxtname1().getText();
        String name2 = findTxtname2().getText();
        String name3 = findTxtname3().getText();
        String name4 = findTxtname4().getText();

        ArrayList<NameSearchObject> arrayList = search_name_MOBI(agent_code, name1, name2, name3, name4);

        for (int i = 0; i < 4; i++) {
            int count = i + 1;
            Label lblResponse = (Label) findByName("lblName" + count + "Response", contTest);
            lblResponse.setText("");
        }
        for (int i = 0; i < arrayList.size(); i++) {
            int count = i + 1;
            Label lblResponse = (Label) findByName("lblName" + count + "Response", contTest);
            NameSearchObject n = arrayList.get(i);
            lblResponse.setText("");
            if (n.isIsValid()) {
                lblResponse.setText("Might be available");
                lblResponse.setUIID("LabelGreen");
            } else {
                lblResponse.setText("Is not available");
                lblResponse.setUIID("LabelRed");
            }
        }
    }

    public void checkRegButtonPressed() {

        String msg = "";

        if (isRegStep1Passed == false) {
            msg = "Please complete step 1 first and press Continue.";
        } else if (isRegStep2Passed == false) {
            msg = "Please complete step 2 first and press Continue.";
        } else if (isRegStep3Passed == false) {
            msg = "Please complete step 3 first and press Next.";
        }

        Dialog.show("Error", msg, "Ok", null);

    }

    //public Result get_otp_info_MOBI(String trak_no) {
    public Result ReservedName_Name_Mobi(String customerCode, String Name_Res_no) {

        final String SOAP_BODY
                = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cipc=\"CIPC_WEB_SERVICES\">\n"
                + "   <soapenv:Header/>\n"
                + "   <soapenv:Body>\n"
                + "      <cipc:Get_Approved_Name_MObi>\n"
                + "        <cipc:sUserName>wBAA7LAkWIs=</cipc:sUserName>\n"
                + "          <cipc:sPassword>6EGQAUzYJlhvffhZ+gUFfg==</cipc:sPassword>\n"
                + "          <cipc:sBankID>wBAA7LAkWIs=</cipc:sBankID>\n"
                + "         <cipc:sRefNo>" + Name_Res_no + "</cipc:sRefNo>\n"
                + "         <cipc:sCust_Code>" + customerCode + "</cipc:sCust_Code>\n"
                + "      </cipc:Get_Approved_Name_MObi>\n"
                + "   </soapenv:Body>\n"
                + "</soapenv:Envelope>";
//                = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cipc=\"CIPC_WEB_SERVICES\">\n"
//                + "   <soapenv:Header/>\n"
//                + "   <soapenv:Body>\n"
//                + "      <cipc:get_otp_info_MOBI>\n"
//                + "           <cipc:sUserName>wBAA7LAkWIs=</cipc:sUserName>\n"
//                + "         <cipc:sPassword>nhXSFLH3xKlrDYYKEWHlVw==</cipc:sPassword>\n"
//                + "         <cipc:sBankID>wBAA7LAkWIs=</cipc:sBankID>\n"
//                + "         <cipc:Sent_no>K2016186748</cipc:Sent_no>\n"
//                + "         <cipc:track_no>" + trak_no + "</cipc:track_no>\n"
//                + "      </cipc:get_otp_info_MOBI>\n"
//                + "   </soapenv:Body>\n"
//                + "</soapenv:Envelope>";

        ConnectionRequest httpRequest = new ConnectionRequest() {
            Element h;

            @Override
            protected void buildRequestBody(OutputStream os) throws IOException {
                super.buildRequestBody(os);
                os.write(SOAP_BODY.getBytes("utf-8"));
            }

            protected void postResponse() {
                super.postResponse();
            }

            protected void readResponse(InputStream input) throws IOException {
                super.readResponse(input);
            }

        };

        httpRequest.setUrl("https://testwebservices4.cipc.co.za/enterprise.asmx?wsdl");
        httpRequest.addRequestHeader("Content-Type", "text/xml; charset=utf-8");
        httpRequest.addRequestHeader("Content-Length", SOAP_BODY.length() + "");
        httpRequest.setPost(true);
        NetworkManager.getInstance().setTimeout(60000);
        NetworkManager.getInstance().addToQueueAndWait(httpRequest);
        String data = new String(httpRequest.getResponseData());
        Result result = Result.fromContent(data, Result.XML);
        return result;
    }

    public String ReservedName_Name_Mobi_old(String customerCode, String Name_Res_no) {

        String response = "";
        Log.p("Reservename_Mobi", Log.DEBUG);
        final String SOAP_BODY
                = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cipc=\"CIPC_WEB_SERVICES\">\n"
                + "   <soapenv:Header/>\n"
                + "   <soapenv:Body>\n"
                + "      <cipc:Get_Approved_Name_MObi>\n"
                + "        <cipc:sUserName>wBAA7LAkWIs=</cipc:sUserName>\n"
                + "          <cipc:sPassword>6EGQAUzYJlhvffhZ+gUFfg==</cipc:sPassword>\n"
                + "          <cipc:sBankID>wBAA7LAkWIs=</cipc:sBankID>\n"
                + "         <cipc:sRefNo>" + Name_Res_no + "</cipc:sRefNo>\n"
                + "         <cipc:sCust_Code>" + customerCode + "</cipc:sCust_Code>\n"
                + "      </cipc:Get_Approved_Name_MObi>\n"
                + "   </soapenv:Body>\n"
                + "</soapenv:Envelope>";
        Log.p("Reservename_Mobi1", Log.DEBUG);
        ConnectionRequest httpRequest = new ConnectionRequest() {
            Element h;

            @Override
            protected void handleErrorResponseCode(int code, String message) {
                super.handleErrorResponseCode(code, message); //To change body of generated methods, choose Tools | Templates.
                if (500 == code) {
                    Dialog.show("Error", "An Error occured", "Ok", null);
                }
            }

            @Override
            protected void handleIOException(IOException err) {
                //    super.handleIOException(err); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            protected void handleRuntimeException(RuntimeException err) {
                //super.handleRuntimeException(err); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            protected void buildRequestBody(OutputStream os) throws IOException {
                super.buildRequestBody(os);
                os.write(SOAP_BODY.getBytes("utf-8"));

            }

            protected void postResponse() {

                super.postResponse();
            }

            protected void readResponse(InputStream input) throws IOException {
                super.readResponse(input);

            }

            @Override
            protected void handleException(Exception err) {
                Log.p("Exception: " + err.toString());
                Dialog.show("No Internet", "There is no internet connection. Please switch your connection on.", "Okay", null);

            }
        };
        Log.p("Reservename_Mobi2", Log.DEBUG);
        httpRequest.setUrl("https://testwebservices4.cipc.co.za/enterprise.asmx");
        httpRequest.addRequestHeader("Content-Type", "text/xml; charset=utf-8");
        httpRequest.addRequestHeader("Content-Length", SOAP_BODY.length() + "");
        httpRequest.setPost(true);
        httpRequest.setFailSilently(true);
        Log.p("Reservename_Mobi3", Log.DEBUG);
        InfiniteProgress prog = new InfiniteProgress();
        Dialog dlg = prog.showInifiniteBlocking();
        httpRequest.setDisposeOnCompletion(dlg);
        Log.p("Reservename_Mobi4", Log.DEBUG);
        NetworkManager.getInstance().addToQueueAndWait(httpRequest);
        Log.p("Reservename_Mobi5", Log.DEBUG);
        String data = new String(httpRequest.getResponseData());
        Log.p("Reservename_Mobi6", Log.DEBUG);
        Log.p("Data d: " + data, Log.DEBUG);

        try {

            Result result = Result.fromContent(data, Result.XML);
            String Namereservation_MOBI_traknoresult = result.getAsString("//Get_Approved_Name_MObiResult");

            response = Namereservation_MOBI_traknoresult;
            if (response != null) {
                response = response.trim();
            }

            //Log.p("result: " + result, Log.DEBUG);
            //Log.p("namereservation_mobiresult: " + namereservation_mobiresult, Log.DEBUG);
        } catch (IllegalArgumentException e) {
            Log.p(e.toString());
        }

        return response;
    }

    public String Namereservation_MOBI(String customerCode, String name1, String name2, String name3, String name4) {

        String response = "";

        final String SOAP_BODY
                = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cipc=\"CIPC_WEB_SERVICES\">\n"
                + "\n"
                + "   <soapenv:Header/>\n"
                + "\n"
                + "   <soapenv:Body>\n"
                + "\n"
                + "      <cipc:Namereservation_MOBI_trakno>\n"
                + "\n"
                + "        <cipc:sUserName>ImJbvgnMVO0=</cipc:sUserName>       \n"
                + "\n"
                + "         <cipc:sPassword>WViQlFqcunA=</cipc:sPassword>\n"
                + "\n"
                + "         <cipc:sBankID>WViQlFqcunA=</cipc:sBankID>\n"
                + "\n"
                + "         <cipc:S_name1>" + name1 + "</cipc:S_name1>\n"
                + "\n"
                + "         <!--Optional:-->\n"
                + "\n"
                + "         <cipc:S_name2>" + name2 + "</cipc:S_name2>\n"
                + "\n"
                + "         <!--Optional:-->\n"
                + "\n"
                + "         <cipc:S_name3>" + name3 + "</cipc:S_name3>\n"
                + "\n"
                + "         <!--Optional:-->\n"
                + "\n"
                + "         <cipc:S_name4>" + name4 + "</cipc:S_name4>\n"
                + "\n"
                + "         <!--Optional:-->\n"
                + "\n"
                + "         <cipc:sCust_Code>" + customerCode + "</cipc:sCust_Code>\n"
                + "\n"
                + "      </cipc:Namereservation_MOBI_trakno>\n"
                + "\n"
                + "   </soapenv:Body>\n"
                + "\n"
                + "</soapenv:Envelope>";

        ConnectionRequest httpRequest = new ConnectionRequest() {
            Element h;

            @Override
            protected void handleErrorResponseCode(int code, String message) {
                super.handleErrorResponseCode(code, message); //To change body of generated methods, choose Tools | Templates.
                if (500 == code) {
                    Dialog.show("Error", "Duplicate Name Reservation Error. Please try different names.", "Ok", null);
                }
            }

            @Override
            protected void handleIOException(IOException err) {
                //    super.handleIOException(err); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            protected void handleRuntimeException(RuntimeException err) {
                //super.handleRuntimeException(err); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            protected void buildRequestBody(OutputStream os) throws IOException {
                super.buildRequestBody(os);
                os.write(SOAP_BODY.getBytes("utf-8"));

            }

            protected void postResponse() {

                super.postResponse();
            }

            protected void readResponse(InputStream input) throws IOException {
                super.readResponse(input);

            }

            @Override
            protected void handleException(Exception err) {
                Log.p("Exception: " + err.toString());
                Dialog.show("No Internet", "There is no internet connection. Please switch your connection on.", "Okay", null);

            }
        };

        httpRequest.setUrl("https://testwebservices4.cipc.co.za/enterprise.asmx");
        httpRequest.addRequestHeader("Content-Type", "text/xml; charset=utf-8");
        httpRequest.addRequestHeader("Content-Length", SOAP_BODY.length() + "");
        httpRequest.setPost(true);
        httpRequest.setFailSilently(true);

        InfiniteProgress prog = new InfiniteProgress();
        Dialog dlg = prog.showInifiniteBlocking();
        httpRequest.setDisposeOnCompletion(dlg);

        NetworkManager.getInstance().addToQueueAndWait(httpRequest);
        String data = new String(httpRequest.getResponseData());
        Log.p("Data d: " + data, Log.DEBUG);

        try {

            Result result = Result.fromContent(data, Result.XML);
            String Namereservation_MOBI_traknoresult = result.getAsString("//Namereservation_MOBI_traknoresult");

            response = Namereservation_MOBI_traknoresult;
            if (response != null) {
                response = response.trim();
            }

            //Log.p("result: " + result, Log.DEBUG);
            //Log.p("namereservation_mobiresult: " + namereservation_mobiresult, Log.DEBUG);
        } catch (IllegalArgumentException e) {
            Log.p(e.toString());
        }

        return response;
    }//end name reservation

    @Override
    protected void onFrmNewEntReg1_BtnFileNameAction(Component c, ActionEvent event) {
        String name1 = findTxtname1().getText();
        String name2 = findTxtname2().getText();
        String name3 = findTxtname3().getText();
        String name4 = findTxtname4().getText();
        // UserWebServices u = new UserWebServices();
        String responseCall = Namereservation_MOBI(agent_code, name1, name2, name3, name4);
        Log.p(responseCall, Log.DEBUG);
        StringTokenizer token = new StringTokenizer(responseCall, "|");
        //String[] strArry = responseCall.split("|"); // .split("\\|");
        name_reservation_no = token.nextToken();
        Log.p(name_reservation_no, Log.DEBUG);
        responseCall = token.nextToken();
        Log.p(responseCall, Log.DEBUG);
        if (responseCall != null && responseCall.length() > 0
                && responseCall.indexOf("already filed") == -1) {
            Dialog.show("Success", responseCall, "Ok", null);
            isnamereserved = true;
            Form f = c.getComponentForm();
            Label lblname_no = (Label) findByName("LbLNameResNo", f);
            lblname_no.setText(name_reservation_no);
            Tabs tabs = (Tabs) findByName("Tabs", f);
            f.setTitle("Enterprise Details");
            tabs.setSelectedIndex(2);
            //showCart(f);
        } else if (responseCall != null && responseCall.length() > 0
                && responseCall.indexOf("already filed") != -1) {
            Dialog.show("Error", responseCall, "Ok", null);//TODO scroll to top
        } else {
            Dialog.show("Error", "Error occurred while processing your request. Please try again later or contact CIPC.", "Ok", null);
        }
    }

    @Override
    protected void beforeFrmNewEntReg1(Form f) {

        Tabs tabs = (Tabs) findByName("Tabs", f);
        tabs.setSwipeActivated(false);
        tabs.hideTabs();
        Button btn1 = new Button("Info");
        Button btn2 = new Button("Name");
        Button btn3 = new Button("Enterprise");
        Button btn4 = new Button("Director(s)");
//        TextField txtapprovedno = (TextField) findByName("TxtApprovedNo", f);
//        txtapprovedno.addDataChangedListener(new DataChangedListener() {
//            public void dataChanged(int type, int index) {
//                String txt1 = findTxtApprovedNo().getText();
//                Log.p(txt1, Log.DEBUG);
////                String approvedname = "";
////                String errdesc = "";
////                String reserved_no = "";
////                if (txt1.length() > 8) {
////                    Log.p("in" + txt1, Log.DEBUG);
////
////                    Log.p("in1" + txt1, Log.DEBUG);
////                    Result result = ReservedName_Name_Mobi("INKE01", txt1);
////                    ReservedName(result);
////
////                    for (int i = 0; i < ArlNameReserved.size(); i++) {
////                        NameReserved nr = ArlNameReserved.get(i);
////                        approvedname = nr.ApprovedName;
////                        errdesc = nr.Error_Desc;
////                        reserved_no = nr.Reserved_NO;
////                    }
////                    Log.p("in2" + txt1, Log.DEBUG);
////                    //Log.p (approvedname, Log.DEBUG);
////                    if (errdesc.toString() == null && errdesc.trim() == "") {
////                        Dialog.show("Error", errdesc, "OK", null);
////                        return;
////                    } else {
////                        Label lblapprovedname = (Label) findByName("LblApprovedName", f);
////                        lblapprovedname.setText(approvedname);
////                        Button cmd = (Button) findByName("BtnStartNewReg", f);
////                        cmd.setText("Continue to Enterprise Details");
////                        cmd.setVisible(true);
////                        cmd.repaint();
////                    }
////                } else {
////                    Button cmd = (Button) findByName("BtnStartNewReg", f);
////                    cmd.setVisible(false);
////                    cmd.repaint();
////                }
//            }
//        });

//         txtapprovedno.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                //Log.p("clicked btn1", Log.DEBUG);
//                
//            }
//        });
        btn1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                //Log.p("clicked btn1", Log.DEBUG);
                f.setTitle("New Registration Details Details");
                tabs.setSelectedIndex(0);
            }
        });

        btn2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                //Log.p("clicked btn2, isRegStep1Passed=" + isRegStep1Passed
                //   + ", isRegStep2Passed=" + isRegStep2Passed, Log.DEBUG);
                if (isRegStep1Passed == true) {
                    f.setTitle("File Name Reservation");
                    tabs.setSelectedIndex(1);
                } else {
                    checkRegButtonPressed();
                }
            }
        });

        btn3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                //Log.p("clicked btn3", Log.DEBUG);
                if (isnamereserved == true || isRegStep2Passed == true) {
                    f.setTitle("Enterprise Details");
                    tabs.setSelectedIndex(2);
                } else {
                    checkRegButtonPressed();
                }
            }
        });

        btn4.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                //Log.p("clicked btn4", Log.DEBUG);
                if (isnamereserved == true && isRegStep3Passed == true
                        && isRegStep3Passed == true) {
                    f.setTitle("Director Details");
                    tabs.setSelectedIndex(3);
                } else {
                    checkRegButtonPressed();
                }
            }
        });

        Container contTop = new Container();
        contTop.setUIID("LabelWhite");
        contTop.setLayout(new GridLayout(1, 4));
        contTop.add(btn1).add(btn2).add(btn3).add(btn4);

        f.add(BorderLayout.NORTH, contTop);

        tabs.addSelectionListener(new SelectionListener() {
            @Override
            public void selectionChanged(int oldSelected, int newSelected) {

            }
        });
        TextField tx1 = (TextField) findByName("TxtApprovedNo", f);
        tx1.setVisible(false);
        tx1.repaint();
//        Button cmd = (Button) findByName("BtnStartNewReg", f);
//        cmd.setVisible(false);
//        cmd.repaint();
//                Container coninfo = (Container) findByName("ConInfo",tabs);
//                Container conApprovedname = (Container) findByName("ConApprovedName", coninfo);
//                Log.p (conApprovedname.getName(),Log.DEBUG);
//                //conApprovedname.setHidden(true);
//                conApprovedname.setVisible(false);
//                //conApprovedname.getParent().animateLayout(200);
//                conApprovedname.repaint();
    }

    private void ReservedName(Result result) {
        try {
            Log.p("Result=" + result);

            XMLParser parser = new XMLParser();
            parser.setCaseSensitive(true);
            Element element = parser.parse(convertStringtoInputStreamReader(result.getAsString("//newdataset")));
            ArlNameReserved = new ArrayList();

            for (int i = 0; i < element.getNumChildren(); i++) {

                Element child = element.getChildAt(i);

                Element elem_error_desc = ((Element) child.getTextChildren(null, true).get(0));
                String error_desc = elem_error_desc.getText();
                Element elem_application_no = ((Element) child.getTextChildren(null, true).get(1));
                String reserved_no = elem_application_no.getText();
                Element elem_approved_name = ((Element) child.getTextChildren(null, true).get(2));
                String approvedname = elem_approved_name.getText();
                NameReserved namereserved = new NameReserved();
                namereserved.setApprovedName(approvedname);
                namereserved.setReserved_NO(reserved_no);
                namereserved.setError_Desc(error_desc);
                ArlNameReserved.add(namereserved);
                //Log.p(id_no + ", " + otp + ", " + ent_no + ", " + first_names + ", " + surname);
            }
            //showForm("ChangeNameContinue", null);

        } catch (Throwable err) {
            Dialog.show("Change Name", err.toString(), "OK", null);
        }

    }

    @Override
    protected void onCreateFrmNewEntReg1() {

    }

    @Override
    protected void onFrmNewEntReg1_ChBSubmitNameReservationAction(Component c, ActionEvent event) {
        Form f = c.getComponentForm();
        CheckBox RDB = (CheckBox) findByName("ChBSubmitNameReservation", f);
        if (RDB.isSelected()) {
            isnamereserved = true;
            isRegStep1Passed = true;
            Tabs tabs = (Tabs) findByName("Tabs", f);
            tabs.setSwipeActivated(false);
            tabs.hideTabs();
            f.setTitle("File Name Reservation");
            tabs.setSelectedIndex(1);
//            Container conApprovedName = (Container) findByName("ConApprovedName", f);
//            conApprovedName.setVisible(false);
//            conApprovedName.repaint();
//            Button cmd = (Button) findByName("BtnStartNewReg", f);
//            cmd.setText("Continue To Name Reservation");
//            cmd.setVisible(true);
//            cmd.repaint();

        } else {
//            Container conApprovedName = (Container) findByName("ConApprovedName", f);
//            conApprovedName.setVisible(true);
//            conApprovedName.repaint();
//            Button cmd = (Button) findByName("BtnStartNewReg", f);
//            cmd.setVisible(false);
//            cmd.repaint();
        }
//            if (c instanceof RadioButton || c instanceof CheckBox) {
//            if (((Button) c).isSelected()) {
//                //Form f = c.getComponentForm();
//                Container conApprovedName = (Container) findByName("ConApprovedName", f);
//                conApprovedName.setVisible(true);
//            } else {
//                Form f = c.getComponentForm();
//                Container conApprovedName = (Container) findByName("ConApprovedName", f);
//                conApprovedName.setVisible(true);
//            }
    }

    protected void onFrmNewEntReg1_CheckBoxAction(Component c, ActionEvent event) {
        Form f = c.getComponentForm();
        CheckBox CHB = (CheckBox) findByName("ChkBApprovedName", f);
        if (CHB.isSelected()) {
            CheckBox CHB1 = (CheckBox) findByName("ChBSubmitNameReservation", f);
            CHB1.setVisible(false);
            CHB1.repaint();
        } else {
            CheckBox CHB1 = (CheckBox) findByName("ChBSubmitNameReservation", f);
            CHB1.setVisible(false);
            CHB1.repaint();
        }
    }

    @Override
    protected void onFrmNewEntReg1_ChkBApprovedNameAction(Component c, ActionEvent event) {
        Form f = c.getComponentForm();
        CheckBox CHB = (CheckBox) findByName("ChkBApprovedName", f);
        if (CHB.isSelected()) {
            CheckBox CHB1 = (CheckBox) findByName("ChBSubmitNameReservation", f);
            CHB1.setVisible(false);
            CHB1.repaint();
            TextField tx1 = (TextField) findByName("TxtApprovedNo", f);
            tx1.setVisible(true);
            tx1.repaint();
            Button cmdval = (Button) findByName("btnvalno", f);
            cmdval.setVisible(true);
            cmdval.repaint();
//            Button cmd = (Button) findByName("BtnStartNewReg", f);
//            //cmd.setText("Continue To Name Reservation");
//            cmd.setVisible(false);
//            cmd.repaint();
        } else {
            CheckBox CHB1 = (CheckBox) findByName("ChBSubmitNameReservation", f);
            CHB1.setVisible(true);
            CHB1.repaint();
            TextField tx1 = (TextField) findByName("TxtApprovedNo", f);
//            tx1.setText("");
            tx1.setVisible(false);
            tx1.repaint();
            Button cmdval = (Button) findByName("btnvalno", f);
            cmdval.setVisible(false);
            cmdval.repaint();
//            Button cmd = (Button) findByName("BtnStartNewReg", f);
//            //cmd.setText("Continue To Name Reservation");
//            cmd.setVisible(true);
//            cmd.repaint();
        }
    }

    @Override
    protected void onFrmNewEntReg1_TxtApprovedNoAction(Component c, ActionEvent event) {

    }

    @Override
    protected void onFrmNewEntReg1_BtnStartNewRegAction(Component c, ActionEvent event) {

        Form f = c.getComponentForm();
        Button BTN = (Button) findByName("BtnStartNewReg", f);
//        if (BTN.getText() == "Continue To Name Reservation") {
//            isnamereserved = true;
//            isRegStep1Passed = true;
//            Tabs tabs = (Tabs) findByName("Tabs", f);
//            tabs.setSwipeActivated(false);
//            tabs.hideTabs();
//            f.setTitle("File Name reservation");
//            tabs.setSelectedIndex(1);
//            name_reservation_no = findTxtApprovedNo().getText();
//            Label lblname_no = (Label) findByName("LbLNameResNo", f);
//            lblname_no.setText(name_reservation_no);
//        } else if (BTN.getText() == "Continue with no name") {
            isnamereserved = true;
            isRegStep1Passed = false;
            Tabs tabs = (Tabs) findByName("Tabs", f);
            tabs.setSwipeActivated(false);
            tabs.hideTabs();
            f.setTitle("Enterprise Details");
            tabs.setSelectedIndex(2);
            //name_reservation_no = findTxtApprovedNo().getText();
            //Label lblname_no = (Label) findByName("LbLNameResNo",f);
            //lblname_no.setText(name_reservation_no);
//        } else {
//            isnamereserved = true;
//            isRegStep1Passed = false;
//            Tabs tabs = (Tabs) findByName("Tabs", f);
//            tabs.setSwipeActivated(false);
//            tabs.hideTabs();
//            f.setTitle("Enterprise Details");
//            tabs.setSelectedIndex(2);
//            name_reservation_no = findTxtApprovedNo().getText();
//            Label lblname_no = (Label) findByName("LbLNameResNo", tabs);
//            lblname_no.setText(name_reservation_no);
        }
    //}

    protected void onFrmNewEntReg1_BtnvalnoAction(Component c, ActionEvent event) {
        Form f = c.getComponentForm();
        TextField txt1 = (TextField) findByName("TxtApprovedNo", f);
        String approvedname = "";
        String errdesc = "";
        String reserved_no = "";
        String TXTVAL = txt1.getText();
        if (TXTVAL.length() > 8) {
            Log.p("in" + txt1, Log.DEBUG);

            Result result = ReservedName_Name_Mobi("INKE01", txt1.getText());
            ReservedName(result);

            for (int i = 0; i < ArlNameReserved.size(); i++) {
                NameReserved nr = ArlNameReserved.get(i);
                approvedname = nr.ApprovedName;
                errdesc = nr.Error_Desc;
                reserved_no = nr.Reserved_NO;
            }
            Log.p("in2" + txt1, Log.DEBUG);
            //Log.p (approvedname, Log.DEBUG);

            if ("Err".equals(errdesc.substring(2, 5))) {
                Dialog.show("Error", errdesc, "OK", null);
                return;
            } else {
                  
            Label lblname_no = (Label) findByName("LbLNameResNo", f);
            lblname_no.setText(reserved_no);
                isnamereserved = true;
                isRegStep1Passed = false;
                //f.setTitle("Enterprise Details");
                Tabs tabs = (Tabs) findByName("Tabs", f);
                
                tabs.setSwipeActivated(false);
                tabs.hideTabs();
                f.setTitle("Enterprise Details");
                tabs.setSelectedIndex(2);
//                Label lblapprovedname = (Label) findByName("LblApprovedName", f);
//                lblapprovedname.setText(approvedname);
//                lblapprovedname.repaint();
//                Button cmdval = (Button) findByName("btnvalno", f);
//                cmdval.setVisible(false);
//                cmdval.repaint();
//                Button cmd = (Button) findByName("BtnStartNewReg", f);
//                cmd.setText("Continue to Enterprise Details");
//                cmd.setVisible(true);
//                cmd.repaint();
////                Button cmdval = (Button) findByName("btnvalno", f);
////                cmdval.setVisible(false);
////                cmdval.repaint();
            }
        } else {
            Button cmd = (Button) findByName("BtnStartNewReg", f);
            cmd.setVisible(false);
            cmd.repaint();
            Dialog.show("Error", "Invalid Name reservation Number.", "OK", null);
//            Button cmdval = (Button) findByName("btnvalno", f);
//            cmdval.setVisible(false);
//            cmdval.repaint();
        }

    }

    protected void validentdata(Component c) {
        try {
            //boolean isvalid = true;
            Form f = c.getComponentForm();
            TextField TxtAuthShares = (TextField) findByName("TxtAuthShares", f);
            //##########
            if (TxtAuthShares.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid number of shares.", "OK", null);
                TxtAuthShares.repaint();
                TxtAuthShares.requestFocus();
                TxtAuthShares.startEditing();
                return;
            }
            TextField TxtEntEmail = (TextField) findByName("TxtEntEmail", f);
            //##########
            if (TxtEntEmail.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid E-Mail.", "OK", null);
                TxtEntEmail.repaint();
                TxtEntEmail.requestFocus();
                TxtEntEmail.startEditing();
                return;
            }
            TextField txtphysaddr1 = (TextField) findByName("txtPhysAddr1", f);
            //##########
            if (txtphysaddr1.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid physical address line 1.", "OK", null);
                txtphysaddr1.repaint();
                txtphysaddr1.requestFocus();
                txtphysaddr1.startEditing();
                return;
            }
            TextField txtphysaddr2 = (TextField) findByName("txtPhysAddr2", f);
            //##########
            if (txtphysaddr2.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid physical address line 2.", "OK", null);
                txtphysaddr2.repaint();
                txtphysaddr2.requestFocus();
                txtphysaddr2.startEditing();
                return;
            }
            TextField txtphysaddr3 = (TextField) findByName("txtPhysAddr3", f);
            //##########
            if (txtphysaddr3.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid physical address line 3.", "OK", null);
                txtphysaddr3.repaint();
                txtphysaddr3.requestFocus();
                txtphysaddr3.startEditing();
                return;
            }
            ComboBox CmbPhysProvince = (ComboBox) findByName("CmbPhysProvince", f);
            if (CmbPhysProvince.getSelectedItem().toString().equals("Select Province")) {
                Dialog.show("Error", "Please enter a valid province for physical address.", "OK", null);
                CmbPhysProvince.repaint();
                CmbPhysProvince.requestFocus();

                return;
            }
            TextField txtphyscode = (TextField) findByName("txtPhysCode", f);
            //##########
            if (txtphyscode.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid physical address code.", "OK", null);
                txtphyscode.repaint();
                txtphyscode.requestFocus();
                txtphyscode.startEditing();
                return;
            }
            TextField txtpostaladdr1 = (TextField) findByName("TxtPostaladdr1", f);
            //##########
            if (txtpostaladdr1.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid postal address line 1.", "OK", null);
                txtpostaladdr1.repaint();
                txtpostaladdr1.requestFocus();
                txtpostaladdr1.startEditing();
                return;
            }
            TextField txtpostaladdr2 = (TextField) findByName("TxtPostaladdr2", f);
            //##########
            if (txtpostaladdr2.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid postal address line 2.", "OK", null);
                txtpostaladdr2.repaint();
                txtpostaladdr2.requestFocus();
                txtpostaladdr2.startEditing();
                return;
            }
            TextField txtpostaladdr3 = (TextField) findByName("TxtPostaladdr3", f);
            //##########
            if (txtpostaladdr3.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid postal address line 3.", "OK", null);
                txtpostaladdr3.repaint();
                txtpostaladdr3.requestFocus();
                txtpostaladdr3.startEditing();
                return;
            }
            ComboBox cmbentpostalpr = (ComboBox) findByName("CmbentPostalPr", f);
            if (cmbentpostalpr.getSelectedItem().toString().equals("Select Province")) {
                Dialog.show("Error", "Please enter a valid province for postal address.", "OK", null);
                cmbentpostalpr.repaint();
                cmbentpostalpr.requestFocus();
                return;
            }
            TextField txtpostalcode = (TextField) findByName("TxtPostalcode", f);
            //##########
            if (txtpostalcode.getText().trim().equals("")) {
                Dialog.show("Error", "Please enter a valid postal address code.", "OK", null);
                txtpostalcode.repaint();
                txtpostalcode.requestFocus();
                txtpostalcode.startEditing();
                return;
            }
        } catch (IllegalArgumentException e) {
            //return false;
        }

        // return true;
    }

    protected void onFrmNewEntReg1_BtnLoadEntDataAction(Component c, ActionEvent event) {
        validentdata(c);
    }

    @Override
    protected void onFrmNewEntReg1_ChbIssameasPhysAction(Component c, ActionEvent event) {
        Form f = c.getComponentForm();
        CheckBox chbsame = (CheckBox) findByName("ChbIssameasPhys", f);
        if (chbsame.isSelected()) {
            TextField txtpostaladdr1 = (TextField) findByName("TxtPostaladdr1", f);
            TextField txtpostaladdr2 = (TextField) findByName("TxtPostaladdr2", f);
            TextField txtpostaladdr3 = (TextField) findByName("TxtPostaladdr3", f);
            ComboBox cmbentpostalpr = (ComboBox) findByName("CmbentPostalPr", f);
            TextField txtpostalcode = (TextField) findByName("TxtPostalcode", f);
            TextField txtphysaddr1 = (TextField) findByName("txtPhysAddr1", f);
            txtpostaladdr1.setText(txtphysaddr1.getText().toString());
            TextField txtphysaddr2 = (TextField) findByName("txtPhysAddr2", f);
            txtpostaladdr2.setText(txtphysaddr2.getText().toString());
            TextField txtphysaddr3 = (TextField) findByName("txtPhysAddr3", f);
            txtpostaladdr3.setText(txtphysaddr3.getText().toString());
            TextField txtphyscode = (TextField) findByName("txtPhysCode", f);
            txtpostalcode.setText(txtphyscode.getText().toString());
            ComboBox CmbPhysProvince = (ComboBox) findByName("CmbPhysProvince", f);
            cmbentpostalpr.setSelectedIndex(CmbPhysProvince.getSelectedIndex());
        } else {
            TextField txtpostaladdr1 = (TextField) findByName("TxtPostaladdr1", f);
            TextField txtpostaladdr2 = (TextField) findByName("TxtPostaladdr2", f);
            TextField txtpostaladdr3 = (TextField) findByName("TxtPostaladdr3", f);
            ComboBox cmbentpostalpr = (ComboBox) findByName("CmbentPostalPr", f);
            TextField txtpostalcode = (TextField) findByName("TxtPostalcode", f);
            //TextField txtphysaddr1 = (TextField) findByName("txtPhysAddr1", f);
            txtpostaladdr1.setText("");
            //TextField txtphysaddr2 = (TextField) findByName("txtPhysAddr2", f);
            txtpostaladdr2.setText("");
            //TextField txtphysaddr3 = (TextField) findByName("txtPhysAddr3", f);
            txtpostaladdr3.setText("");
            //TextField txtphyscode = (TextField) findByName("txtPhysCode", f);
            txtpostalcode.setText("");
            //ComboBox CmbPhysProvince = (ComboBox) findByName("CmbPhysProvince", f);
            cmbentpostalpr.setSelectedIndex(0);
        }
    }
}
